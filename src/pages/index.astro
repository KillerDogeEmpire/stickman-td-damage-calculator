---
// TODO: Allow equipment to be selected automatically via dropdown/combobox
import Layout from "~/layouts/base.astro";
---

<script>
    const IS_NUMBER = /^(?:^-?[0-9]+(?:\.[0-9]+)?$)|(?:^-?\.[0-9]+$)|(?:^-?[0-9]+\.$)$/;
    const EXTRACT_INDEX = /[12]$/;
    const NO_INDEX = -1;
    const BASE_DAMAGE = document.getElementById("base-damage") as HTMLInputElement;

    interface EquipmentMultiplierElements {
        increasedDamage: HTMLInputElement;
        criticalChance: HTMLInputElement;
        criticalDamage: HTMLInputElement;
        cooldownReduction: HTMLInputElement;
    }

    const EQUIPMENT: EquipmentMultiplierElements[] = [
        {
            increasedDamage: document.getElementById("increased-damage-1") as HTMLInputElement,
            criticalChance: document.getElementById("critical-chance-1") as HTMLInputElement,
            criticalDamage: document.getElementById("critical-multiplier-1") as HTMLInputElement,
            cooldownReduction: document.getElementById("cooldown-reduction-1") as HTMLInputElement,
        },
        {
            increasedDamage: document.getElementById("increased-damage-2") as HTMLInputElement,
            criticalChance: document.getElementById("critical-chance-2") as HTMLInputElement,
            criticalDamage: document.getElementById("critical-multiplier-2") as HTMLInputElement,
            cooldownReduction: document.getElementById("cooldown-reduction-2") as HTMLInputElement,
        },
    ];

    interface EquipmentMultiplierDefaults {
        baseDamage: number;
        attack: number;
        criticalChance: number;
        criticalDamage: number;
        cooldownReduction: number;
    }

    const DEFAULTS: EquipmentMultiplierDefaults = {
        baseDamage: 0,
        attack: 0,
        criticalChance: 0,
        criticalDamage: 0,
        cooldownReduction: 0,
    };

    const OUTPUT = document.getElementById("output") as HTMLSpanElement;
    const i = [0, 0];
    const c = [0, 0];
    const d = [0, 0];
    const s = [0, 0];
    const previousInputs: Record<string, string> = {};

    const isEmpty = (text: string) => !text;

    // TODO: Only allow positive integers for multipliers
    // TODO: Allow for negative multipliers in the case of Reaper
    const isValidNumber = (contents: string) => IS_NUMBER.test(contents);

    // For some reason `event.preventDefault()` was not working so I've resorted
    // to stripping the contents last character and setting that as the input
    // element's new value
    const voidKeypressFor = (inputElement: HTMLInputElement) => {
        const currentContent = inputElement.value;
        const previousInputFound = previousInputs[inputElement.id];

        inputElement.value = (currentContent.length === 1 && previousInputFound?.length <= 1) ? previousInputFound : currentContent.slice(0, -1);
    };

    const processNewInput = (target: HTMLInputElement, fallback: number): [number, number] => {
        const extractionResult = target.id.match(EXTRACT_INDEX);
        let index = NO_INDEX;

        if (extractionResult !== null) {
            index = parseInt(extractionResult[0]) - 1;
        }

        if (isEmpty(target.value)) {
            return [fallback, index];
        } else if (!isValidNumber(target.value)) {
            voidKeypressFor(target);

            return [fallback, index];
        }

        previousInputs[target.id] = target.value;

        return [parseFloat(target.value), index];
    };

    const sum = (numbers: number[]) => numbers.reduce((total, n) => total + n, 0);

    const removeDecimalsIfEquivalent = (number: number) => {
        const absoluteNumber = Math.abs(number);

        return number === absoluteNumber ? absoluteNumber : number;
    };

    const round = (number: number, places = 0) => {
        const multiplier = 10 ** places;

        return Math.round(number * multiplier) / multiplier;
    };

    const prettifyNumber = (number: number, places: number) =>
        removeDecimalsIfEquivalent(round(number, places)).toLocaleString("en-GB");

    const applyFormulaTo = (baseDamage: number) => {
        const attackMultiplier = sum(i);
        const criticalChance = Math.min(sum(c), 1);
        const criticalDamage = sum(d);
        const totalCooldownReduction = sum(s);
        let cooldownReduction = s;

        if (totalCooldownReduction < 0 || (totalCooldownReduction === 0 && cooldownReduction[0] !== 0 && cooldownReduction[1] !== 0)) {
            cooldownReduction = [0, 0];
        } else if (totalCooldownReduction > 1) {
            cooldownReduction = [1, 0];
        }

        const totalDamageMultiplier =
            (1 + attackMultiplier) *
            (criticalChance * (criticalDamage + 1.5) + (1 - criticalChance)) *
            ((1 / (1 - cooldownReduction[0])) * (1 / (1 - cooldownReduction[1])));
        const prettyTotalDamage = prettifyNumber(baseDamage * totalDamageMultiplier, 1);
        const prettyTotalDamageMultiplier = prettifyNumber(totalDamageMultiplier * 100, 2);
        const additiveTotalDamageMultiplier = prettifyNumber((totalDamageMultiplier - 1) * 100, 2);

        // Maintain for future debugging
        // console.log("Attack multiplier:", attackMultiplier);
        // console.log("Critical chance:", criticalChance);
        // console.log("Critical damage:", criticalDamage);
        // console.log("Cooldown reduction:", cooldownReduction);
        // console.log("Total damage multiplier:", totalDamageMultiplier);

        return `${prettyTotalDamage} (${prettyTotalDamageMultiplier}% or +${additiveTotalDamageMultiplier}%)`;
    };

    const performAndShowCalculation = (target: HTMLInputElement) => {
        const [damage] = processNewInput(target, DEFAULTS.baseDamage);

        OUTPUT.textContent = `${applyFormulaTo(damage)}`;
    };

    const displayCalculatedDamage: EventListener = event => {
        performAndShowCalculation(event.target as HTMLInputElement);
    };

    const trackAttackMultipliers: EventListener = event => {
        const [attackMultiplier, index] = processNewInput(event.target as HTMLInputElement, DEFAULTS.attack);
        i[index] = attackMultiplier;

        performAndShowCalculation(BASE_DAMAGE);
    };

    const trackCriticalChances: EventListener = event => {
        const [criticalChance, index] = processNewInput(event.target as HTMLInputElement, DEFAULTS.criticalChance);
        c[index] = criticalChance / 100;

        performAndShowCalculation(BASE_DAMAGE);
    };

    const trackCriticalDamageMultipliers: EventListener = event => {
        const [criticalDamageMultiplier, index] = processNewInput(
            event.target as HTMLInputElement,
            DEFAULTS.criticalDamage,
        );
        d[index] = criticalDamageMultiplier;

        performAndShowCalculation(BASE_DAMAGE);
    };

    const trackCooldownReductions: EventListener = event => {
        const [cooldownReduction, index] = processNewInput(
            event.target as HTMLInputElement,
            DEFAULTS.cooldownReduction,
        );
        s[index] = cooldownReduction;

        performAndShowCalculation(BASE_DAMAGE);
    };

    BASE_DAMAGE.addEventListener("input", displayCalculatedDamage);

    for (const multipliers of EQUIPMENT) {
        multipliers.increasedDamage.addEventListener("input", trackAttackMultipliers);
        multipliers.criticalChance.addEventListener("input", trackCriticalChances);
        multipliers.criticalDamage.addEventListener("input", trackCriticalDamageMultipliers);
        multipliers.cooldownReduction.addEventListener("input", trackCooldownReductions);
    }

    performAndShowCalculation(BASE_DAMAGE);
</script>

<!-- TODO: Add dark mode -->
<!-- TODO: Add theme toggling -->
<!-- TODO: Add source button in top-right corner -->
<Layout class="box-border flex gap-2 p-4 flex-col lg:py-6">
    <div class="flex flex-row gap-2 lg:flex-col">
        <!-- FIXME: Align titles with placeholders of equipment inputs -->
        <span class="hidden font-bold lg:block">Base damage</span>
        <input class="px-2 lg:box-border lg:py-2 lg:mb-4" id="base-damage" min={1} placeholder="Base damage" />

        <div class="flex flex-row lg:flex-col lg:w-full gap-2 lg:mb-4 lg:gap-6">
            {[1, 2].map(number => (
                <div class="box-border flex flex-col gap-2 lg:gap-2.5">
                    <span class="font-bold">Equipment #{number}</span>

                    <!-- TODO: Add percentage labels -->
                    <input class="px-2 py-1 lg:box-brder lg:py-2" id={`increased-damage-${number}`} min={0} placeholder="Increased damage" />
                    <input class="px-2 py-1 lg:box-brder lg:py-2" id={`critical-chance-${number}`} min={0} max={100} placeholder="Critical chance" />
                    <input class="px-2 py-1 lg:box-brder lg:py-2" id={`critical-multiplier-${number}`} min={0} placeholder="Critical damage multiplier" />
                    <input class="px-2 py-1 lg:box-border lg:py-2" id={`cooldown-reduction-${number}`} min={0} max={50} placeholder="Cooldown reduction" />
                </div>
            ))}
        </div>
    </div>

    <span  id="output"></span>
</Layout>
